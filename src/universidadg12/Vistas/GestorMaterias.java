/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package universidadg12.Vistas;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadg12.Model.Materia;
import universidadg12.Persistencia.MateriaData;

/**
 *
 * @author patri
 */
public class GestorMaterias extends javax.swing.JInternalFrame {

    public GestorMaterias() {
        initComponents();
        listarMaterias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnGuardarMat = new javax.swing.JButton();
        txtNombreMat = new javax.swing.JTextField();
        txtBuscarCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ComboEstadoMat = new javax.swing.JComboBox<>();
        btnSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMaterias = new javax.swing.JTable();
        Actualizar = new javax.swing.JButton();
        btnAlta = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        txtAnioMat = new javax.swing.JTextField();
        lblCodigo = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();
        btnLimpiarCampos = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel1.setText("Nombre:");

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel2.setText("Año");

        btnGuardarMat.setText("Insertar");
        btnGuardarMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarMatActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jLabel3.setText("Estado");

        ComboEstadoMat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activa", "Inactiva" }));

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        tblMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Nombre", "Año"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMaterias.setColumnSelectionAllowed(true);
        tblMaterias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMateriasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMaterias);
        tblMaterias.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        Actualizar.setText("Modificar");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });

        btnAlta.setText("Baja/Alta");
        btnAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAltaActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar Lista");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        lblCodigo.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        lblCodigo.setText("Codigo");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnLimpiarCampos.setText("Limpiar");
        btnLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(lblCodigo)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel3))
                                        .addGap(25, 25, 25))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnGuardarMat)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtNombreMat, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                        .addComponent(txtAnioMat)
                                        .addComponent(txtBuscarCodigo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(ComboEstadoMat, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Actualizar))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAlta)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(btnActualizar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBuscar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnLimpiarCampos))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(btnSalir)))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombreMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtAnioMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigo)
                    .addComponent(txtBuscarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiarCampos))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ComboEstadoMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardarMat)
                    .addComponent(Actualizar)
                    .addComponent(btnAlta)
                    .addComponent(btnActualizar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSalir)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void listarMaterias() {
         MateriaData materiaData= new MateriaData();
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel = (DefaultTableModel) tblMaterias.getModel();
        tableModel.setRowCount(0);
        ArrayList<Materia> listado = materiaData.mostrarMaterias();

        for (Materia m : listado) {
            int codigo = m.getId_materia();
            String nombre = m.getNombre();
            int anio = m.getAnio();
            String[] row = {String.valueOf(codigo), nombre, String.valueOf(anio)};
            tableModel.addRow(row);
        }
    }

    public void limpiarCampos() {

        txtNombreMat.setText("");
        txtAnioMat.setText("");
        txtBuscarCodigo.setText("");
        ComboEstadoMat.setSelectedIndex(0);
    }

    public boolean validarCampos() {

        String nombre = txtNombreMat.getText().trim();
        String anioTxt = txtAnioMat.getText().trim();
        String codigo = txtBuscarCodigo.getText().trim();

        // Expresiones regulares
        String soloLetrasYnums = "^[a-zA-ZáéíóúÁÉÍÓÚñÑ0-9 ]+$";  // permite letras, espacios y numeros
        String soloNumeros = "^[0-9]+$";                   // permite solo numeros enteros y positivos 

        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Nombre' no debe estar vacio.");
            return false;
        } else if (!nombre.matches(soloLetrasYnums)) {
            JOptionPane.showMessageDialog(this, "El campo 'Nombre' solo debe contener Letras.");
            return false;
        }

        if (anioTxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Año' no debe estar vacio.");
            return false;
        } else if (!anioTxt.matches(soloNumeros)) {
            JOptionPane.showMessageDialog(this, "El campo 'Año' solo debe contener Numeros.");
            return false;
        }

        if (codigo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Codigo' no debe estar vacio.");
            return false;
        } else if (!codigo.matches(soloNumeros)) {
            JOptionPane.showMessageDialog(this, "El campo 'Codigo' solo debe contener Numeros.");
            return false;
        }

        if (ComboEstadoMat.getSelectedIndex() == 1) {
            JOptionPane.showMessageDialog(this, "El combo 'Estado' debe ser 'Activa'.");
            return false;
        }

        return true;
    }

    public boolean validarCamposSinCod() {

        String nombre = txtNombreMat.getText().trim();
        String anioTxt = txtAnioMat.getText().trim();
        String codigo = txtBuscarCodigo.getText().trim();

        // Expresiones regulares
        String soloLetras = "^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+$";  // permite letras y espacios
        String soloNumeros = "^[0-9]+$";                   // permite solo numeros enteros y positivos 

        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Nombre' no debe estar vacio.");
            return false;
        } else if (!nombre.matches(soloLetras)) {
            JOptionPane.showMessageDialog(this, "El campo 'Nombre' solo debe contener Letras.");
            return false;
        }

        if (anioTxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Año' no debe estar vacio.");
            return false;
        } else if (!anioTxt.matches(soloNumeros)) {
            JOptionPane.showMessageDialog(this, "El campo 'Año' solo debe contener Numeros.");
            return false;
        }

        return true;
    }

    private void btnGuardarMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarMatActionPerformed

        if (validarCamposSinCod()) {
            String nombre = txtNombreMat.getText();
            int anio = Integer.parseInt(txtAnioMat.getText());
            String estado = ComboEstadoMat.getSelectedItem().toString();
            boolean estadob;
            if (estado.equalsIgnoreCase("activa")) {
                estadob = true;
            } else {
                estadob = false;
            }
            Materia materia = new Materia(nombre, anio, estadob);
            MateriaData.guardarMateria(materia);
        }
        limpiarCampos();
    }//GEN-LAST:event_btnGuardarMatActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed

        if (validarCamposSinCod()) {
            String nombre = txtNombreMat.getText();
            int anio = Integer.parseInt(txtAnioMat.getText());
            boolean estado = true;
            Materia materia = new Materia(nombre, anio, estado);
            MateriaData.modificarMateria(materia);
        }
        limpiarCampos();
    }//GEN-LAST:event_ActualizarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
  MateriaData materiaData= new MateriaData();
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel = (DefaultTableModel) tblMaterias.getModel();
        tableModel.setRowCount(0);

        try {
            String nombre = txtNombreMat.getText().trim();
            String soloLetrasYnums = "^[a-zA-ZáéíóúÁÉÍÓÚñÑ0-9 ]+$";
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El campo 'Nombre' no debe estar vacio.");
            } else if (!nombre.matches(soloLetrasYnums)) {
                JOptionPane.showMessageDialog(this, "El campo 'Nombre' solo debe contener Letras.");
            }

            Materia materia = materiaData.buscarMateria(txtNombreMat.getText());

            int codigo = materia.getId_materia();
            String nombreValido = materia.getNombre();
            int anio = materia.getAnio();

            String[] row = {String.valueOf(codigo), nombreValido, String.valueOf(anio)};
            tableModel.addRow(row);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Materia no encontrada, verifique el nombre");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed

        listarMaterias();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void tblMateriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMateriasMouseClicked
      MateriaData materiaData= new MateriaData(); 
        try {
            int fila = tblMaterias.rowAtPoint(evt.getPoint());
            Materia materia = materiaData.buscarMateria(tblMaterias.getValueAt(fila, 1).toString());

            String nombre = tblMaterias.getValueAt(fila, 1).toString();
            String anio = tblMaterias.getValueAt(fila, 2).toString();
            txtNombreMat.setText(nombre);
            txtAnioMat.setText(anio);
            txtBuscarCodigo.setText(String.valueOf(materia.getId_materia()));
            if (materia.isEstado() == true) {
                ComboEstadoMat.setSelectedIndex(0);
            } else {
                ComboEstadoMat.setSelectedIndex(1);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "ERROR AL BUSCAR MATERIA");
        }
    }//GEN-LAST:event_tblMateriasMouseClicked

    private void btnAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAltaActionPerformed
        if (validarCamposSinCod()) {
            String nombre = txtNombreMat.getText();
            int anio = Integer.parseInt(txtAnioMat.getText());
            String estado = ComboEstadoMat.getSelectedItem().toString();
            boolean estadob;
            if (estado.equalsIgnoreCase("activa")) {
                estadob = true;
            } else {
                estadob = false;
            }
            Materia materia = new Materia(nombre, anio, estadob);

            if (materia.isEstado() == true) {
                MateriaData.bajaMateria(materia);
                ComboEstadoMat.setSelectedIndex(1);
            } else {
                MateriaData.altaMateria(materia);
                ComboEstadoMat.setSelectedIndex(0);
            }
        }
        limpiarCampos();
    }//GEN-LAST:event_btnAltaActionPerformed

    private void btnLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCamposActionPerformed

        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarCamposActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actualizar;
    private javax.swing.JComboBox<String> ComboEstadoMat;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAlta;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardarMat;
    private javax.swing.JButton btnLimpiarCampos;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JTable tblMaterias;
    private javax.swing.JTextField txtAnioMat;
    private javax.swing.JTextField txtBuscarCodigo;
    private javax.swing.JTextField txtNombreMat;
    // End of variables declaration//GEN-END:variables
}
